//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "grading_criteria")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub grading_rubric_id: Uuid,
    pub description: Option<String>,
    #[sea_orm(column_type = "Float")]
    pub points: f32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::grading_rubrics::Entity",
        from = "Column::GradingRubricId",
        to = "super::grading_rubrics::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    GradingRubrics,
    #[sea_orm(has_many = "super::performance_level::Entity")]
    PerformanceLevel,
}

impl Related<super::grading_rubrics::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GradingRubrics.def()
    }
}

impl Related<super::performance_level::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PerformanceLevel.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
