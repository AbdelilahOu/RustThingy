//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "groups")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub group_name: String,
    pub group_description: Option<String>,
    pub created_at: Option<DateTime>,
    pub level_id: Option<Uuid>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::classes::Entity")]
    Classes,
    #[sea_orm(has_many = "super::group_assignments::Entity")]
    GroupAssignments,
    #[sea_orm(
        belongs_to = "super::levels::Entity",
        from = "Column::LevelId",
        to = "super::levels::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Levels,
    #[sea_orm(has_many = "super::students::Entity")]
    Students,
}

impl Related<super::classes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Classes.def()
    }
}

impl Related<super::group_assignments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GroupAssignments.def()
    }
}

impl Related<super::levels::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Levels.def()
    }
}

impl Related<super::students::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Students.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
