//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use super::sea_orm_active_enums::DayOfWeekEnum;
use super::sea_orm_active_enums::TimeTableItemType;
use sea_orm::{entity::prelude::*, Set};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "time_table")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub r#type: TimeTableItemType,
    pub day_of_week: Option<DayOfWeekEnum>,
    pub full_date: Option<Date>,
    pub start_time: Option<Time>,
    pub end_time: Option<Time>,
    #[sea_orm(column_type = "Float", nullable)]
    pub duration: Option<f32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub location: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::activities::Entity")]
    Activities,
    #[sea_orm(has_many = "super::events::Entity")]
    Events,
    #[sea_orm(has_many = "super::lectures::Entity")]
    Lectures,
}

impl Related<super::activities::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Activities.def()
    }
}

impl Related<super::events::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Events.def()
    }
}

impl Related<super::lectures::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Lectures.def()
    }
}

impl ActiveModelBehavior for ActiveModel {
    fn new() -> Self {
        Self {
            id: Set(Uuid::new_v4()),
            ..ActiveModelTrait::default()
        }
    }
}
