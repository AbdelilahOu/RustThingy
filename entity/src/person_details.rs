//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "person_details")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub phone_number: Option<String>,
    #[sea_orm(unique)]
    pub email: Option<String>,
    pub country_id: Option<Uuid>,
    pub state_id: Option<Uuid>,
    pub city_id: Option<Uuid>,
    pub district_id: Option<Uuid>,
    pub street_id: Option<Uuid>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::cities::Entity",
        from = "Column::CityId",
        to = "super::cities::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Cities,
    #[sea_orm(
        belongs_to = "super::countries::Entity",
        from = "Column::CountryId",
        to = "super::countries::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Countries,
    #[sea_orm(
        belongs_to = "super::districts::Entity",
        from = "Column::DistrictId",
        to = "super::districts::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Districts,
    #[sea_orm(has_many = "super::persons::Entity")]
    Persons,
    #[sea_orm(
        belongs_to = "super::states::Entity",
        from = "Column::StateId",
        to = "super::states::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    States,
    #[sea_orm(
        belongs_to = "super::streets::Entity",
        from = "Column::StreetId",
        to = "super::streets::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Streets,
}

impl Related<super::cities::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Cities.def()
    }
}

impl Related<super::countries::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Countries.def()
    }
}

impl Related<super::districts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Districts.def()
    }
}

impl Related<super::persons::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Persons.def()
    }
}

impl Related<super::states::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::States.def()
    }
}

impl Related<super::streets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Streets.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
